{"version":3,"file":"static/js/134.aac627e8.chunk.js","mappings":"+SAEMA,EAAM,gCACNC,EAAM,mCAECC,EAAW,mCAAG,sGACFC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACeC,EADf,oBADE,uBACjBG,EADiB,EACjBA,KADiB,kBAIlBA,EAAKC,SAJa,2CAAH,qDAOjB,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,yFACkBJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACUC,EADV,kBACuBM,EADvB,+CADlB,uBACGH,EADH,EACGA,KADH,kBAIEA,EAAKC,SAJP,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA0BC,GAA1B,yFACkBN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACNS,EADM,oBACQR,EADR,oBADlB,uBACGG,EADH,EACGA,KADH,kBAIEA,GAJF,kEAOA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAuBD,GAAvB,yFACkBN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACLS,EADK,4BACiBR,EADjB,oBADlB,uBACGG,EADH,EACGA,KADH,kBAIEA,EAAKO,MAJP,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAyBH,GAAzB,yFACkBN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACLS,EADK,4BACiBR,EADjB,2BADlB,uBACGG,EADH,EACGA,KADH,kBAIEA,EAAKS,QAJP,kE,iHC8BP,UA3De,WACb,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOP,EAAP,KAAcU,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA8BN,EAAAA,EAAAA,WAAS,GAAvC,eAAOO,EAAP,KAAgBC,EAAhB,KAEMC,EAAcJ,EAAaK,IAAI,UAarCC,EAAAA,EAAAA,YAAU,WAAM,wCAGd,mGAEIT,EAFJ,UAEoBV,EAAAA,EAAAA,IAAeiB,GAFnC,kFAIIG,QAAQC,MAAR,MAJJ,yBAMIL,GAAW,GANf,6EAHc,sBACTC,IACLD,GAAW,GAFG,mCAYdM,GACD,GAAE,CAACL,IAEJ,IAAMM,GAAWC,EAAAA,EAAAA,MAEjB,OACE,4BACE,kBAAMC,SA1BK,SAAAC,GACbA,EAAEC,iBAEFb,EAAgB,CAAEb,MAAOA,IACzBU,EAAS,GACV,EAqBG,WACE,kBAAOiB,KAAK,OAAOC,MAAO5B,EAAO6B,SA/BtB,SAAAJ,GACff,EAASe,EAAEK,cAAcF,MAAMG,cAChC,KA8BK,mBAAQJ,KAAK,SAAb,uBAEDb,IAAW,sCACO,IAAlBN,EAAOwB,SAAgB,qDACvBxB,IACC,wBACGA,EAAOyB,KAAI,gBAAG/B,EAAH,EAAGA,GAAIgC,EAAP,EAAOA,MAAP,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAajC,GAAMkC,MAAO,CAAEC,KAAMf,GAA1C,SACGY,KAFIhC,EADC,QAWrB,C","sources":["API.js","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3/';\nconst KEY = '2e3720a8bccf444312af356dec280511';\n\nexport const getTrending = async () => {\n  const { data } = await axios.get(\n    `${URL}trending/movie/day?api_key=${KEY}&language=en-US`\n  );\n  return data.results;\n};\n\nexport async function getSearchQuery(query) {\n  const { data } = await axios.get(\n    `${URL}/search/movie?api_key=${KEY}&query=${query}&include_adult=false&language=en-US&page=1`\n  );\n  return data.results;\n}\n\nexport async function getDetails(id) {\n  const { data } = await axios.get(\n    `${URL}movie/${id}?api_key=${KEY}&language=en-US`\n  );\n  return data;\n}\n\nexport async function getCast(id) {\n  const { data } = await axios.get(\n    `${URL}/movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n  return data.cast;\n}\n\nexport async function getReview(id) {\n  const { data } = await axios.get(\n    `${URL}/movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return data.result;\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams, Link, useLocation } from 'react-router-dom';\nimport { getSearchQuery } from 'API';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [loading, setLoading] = useState(false);\n\n  const movieSearch = searchParams.get('query');\n\n  const onChange = e => {\n    setQuery(e.currentTarget.value.toLowerCase());\n  };\n\n  const submit = e => {\n    e.preventDefault();\n\n    setSearchParams({ query: query });\n    setQuery('');\n  };\n\n  useEffect(() => {\n    if (!movieSearch) return;\n    setLoading(true);\n    async function renderMovies() {\n      try {\n        setMovies(await getSearchQuery(movieSearch));\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    renderMovies();\n  }, [movieSearch]);\n\n  const location = useLocation();\n\n  return (\n    <div>\n      <form onSubmit={submit}>\n        <input type=\"text\" value={query} onChange={onChange} />\n        <button type=\"submit\">Search</button>\n      </form>\n      {loading && <p>Loading...</p>}\n      {movies.length === 0 && <h2>No movies for your query</h2>}\n      {movies && (\n        <ul>\n          {movies.map(({ id, title }) => (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["URL","KEY","getTrending","axios","data","results","getSearchQuery","query","getDetails","id","getCast","cast","getReview","result","useState","movies","setMovies","setQuery","useSearchParams","searchParams","setSearchParams","loading","setLoading","movieSearch","get","useEffect","console","error","renderMovies","location","useLocation","onSubmit","e","preventDefault","type","value","onChange","currentTarget","toLowerCase","length","map","title","to","state","from"],"sourceRoot":""}