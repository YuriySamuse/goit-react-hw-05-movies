{"version":3,"file":"static/js/597.d63e5cb2.chunk.js","mappings":"+SAEMA,EAAM,gCACNC,EAAM,mCAECC,EAAW,mCAAG,sGACFC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACeC,EADf,oBADE,uBACjBG,EADiB,EACjBA,KADiB,kBAIlBA,EAAKC,SAJa,2CAAH,qDAOjB,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,yFACkBJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACUC,EADV,kBACuBM,EADvB,+CADlB,uBACGH,EADH,EACGA,KADH,kBAIEA,EAAKC,SAJP,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA0BC,GAA1B,yFACkBN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACNS,EADM,oBACQR,EADR,oBADlB,uBACGG,EADH,EACGA,KADH,kBAIEA,GAJF,kEAOA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAuBD,GAAvB,yFACkBN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACLS,EADK,4BACiBR,EADjB,oBADlB,uBACGG,EADH,EACGA,KADH,kBAIEA,EAAKO,MAJP,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAyBH,GAAzB,yFACkBN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACLS,EADK,4BACiBR,EADjB,2BADlB,uBACGG,EADH,EACGA,KADH,kBAIEA,EAAKS,QAJP,kE,yGCoBP,UAjDa,WACX,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQT,GAAOU,EAAAA,EAAAA,MAAPV,IAERW,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,qFACjBH,GAAW,GADM,cAGfF,EAHe,UAGAN,EAAAA,EAAAA,IAAQD,GAHR,kFAKfa,QAAQC,MAAR,MALe,yBAOfL,GAAW,GAPI,4EAAH,qDAUhBG,GACD,GAAE,CAACZ,IAIJ,OACE,gCACGQ,IAAW,uCACVF,IAAS,oDACVA,IACC,wBACGA,EAAMS,KAAI,gBAAGf,EAAH,EAAGA,GAAIgB,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,aAAxB,OACT,2BACE,gBACEC,IACED,EAAY,yCAC0BA,GAbjC,sCAgBPE,IAAKH,KAEP,4BACE,uBAAID,KACJ,uBAAIC,SAXCjB,EADA,QAoBpB,C","sources":["API.js","components/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3/';\nconst KEY = '2e3720a8bccf444312af356dec280511';\n\nexport const getTrending = async () => {\n  const { data } = await axios.get(\n    `${URL}trending/movie/day?api_key=${KEY}&language=en-US`\n  );\n  return data.results;\n};\n\nexport async function getSearchQuery(query) {\n  const { data } = await axios.get(\n    `${URL}/search/movie?api_key=${KEY}&query=${query}&include_adult=false&language=en-US&page=1`\n  );\n  return data.results;\n}\n\nexport async function getDetails(id) {\n  const { data } = await axios.get(\n    `${URL}movie/${id}?api_key=${KEY}&language=en-US`\n  );\n  return data;\n}\n\nexport async function getCast(id) {\n  const { data } = await axios.get(\n    `${URL}/movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n  return data.cast;\n}\n\nexport async function getReview(id) {\n  const { data } = await axios.get(\n    `${URL}/movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return data.result;\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'API';\n\nconst Cast = () => {\n  const [casts, setCasts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const renderCast = async () => {\n      setLoading(true);\n      try {\n        setCasts(await getCast(id));\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    renderCast();\n  }, [id]);\n\n  const defaultImage = 'https://via.placeholder.com/200x300';\n\n  return (\n    <>\n      {loading && <p>Loading...</p>}\n      {!casts && <p>No actors for this Movie</p>}\n      {casts && (\n        <ul>\n          {casts.map(({ id, character, name, profile_path }) => (\n            <li key={id}>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w200${profile_path}`\n                    : defaultImage\n                }\n                alt={name}\n              />\n              <div>\n                <p>{character}</p>\n                <p>{name}</p>\n              </div>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["URL","KEY","getTrending","axios","data","results","getSearchQuery","query","getDetails","id","getCast","cast","getReview","result","useState","casts","setCasts","loading","setLoading","useParams","useEffect","renderCast","console","error","map","character","name","profile_path","src","alt"],"sourceRoot":""}